AOP（概念）
    (1)面向切面（方面）编程，利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，
        同时提高了开发的效率。
    (2)通俗描述：不修改源代码，在主干功能里面添加新功能

AOP（底层原理）
    (1)AOP底层使用动态代理
        [1]有两种情况的动态代理
            第一种：有接口情况，使用JDK动态代理
                创建接口实现类代理对象，增强类的方法。
            第二种：没有接口的情况，使用CGLIB动态代理
                创建当前类子类的代理对象，增强类的方法

AOP（JDK动态代理）
    (1)使用JDK动态代理，使用Proxy类里面的方法创建代理对象
        [1]调用newProxyInstance方法
            方法中有三个参数，第一个参数，ClassLoader loader 类加载器
                            第二个参数，类<?>[] interfaces 增强方法所在的类，这个类实现的接口，支持多个接口
                            第三个参数，InvocationHandler h 实现里面的接口InvocationHandler，创建代理对象，写增强的方法
    (2)编写JDK动态代理代码
        [1]创建接口，定义方法
        [2]创建接口实现类，实现方法
    (3)使用Proxy类创建接口代理对象

AOP（术语）
    (1)连接点：类里面哪些方法可以被增强，这些方法就叫连接点
    (2)切入点：实际被真正增强的方法，称为切入点
    (3)通知（增强）：
        [1]实际增强的逻辑部分称为通知（增强）
        [2]通知有多种类型：前置通知：方法前执行
                          后置通知：方法后执行
                          环绕通知：方法前后都执行
                          异常通知：
                          最终通知：类似于finally
    (4)切面：是动作，把通知（增强）应用到切入点的过程

AOP操作（准备）
    (1)Spring框架一般基于AspectJ实现AOP操作
        [1]什么是AspectJ
            AspectJ不是Spring组成部分，独立的AOP框架，一般把AspectJ和Spring框架一起使用，进行AOP操作
    (2)基于AspectJ实现AOP操作
        [1]基于xml配置文件实现
        [2]基于注解方式实现（较常用）
    (3)在项目工程里面引入AOP相关依赖
    (4)切入点表达式
        [1]作用：知道对哪个类里面的哪个方法进行增强
        [2]语法结构：Execution（[权限修饰符][返回类型][类的全路径][方法名称][参数列表]）
            举例1：对com.AOP.dao.BookDao类里面的add进行增强
                    execution(* com.aop.dao.BookDao.add(..))   *表示任意修饰符
            举例2：对com.AOP.dao.BookDao类里面的所有方法进行增强
                    execution(* com.aop.dao.BookDao.*(..))      *还表示所有方法
            举例2：对com.AOP.dao包里面所有类里面的所有方法进行增强
                    execution(* com.aop.dao.*.*(..))

AOP操作（AspectJ注解）
    (1)创建类，在类里面定义方法
    (2)创建增强类（编写增强逻辑）
        [1]在增强类里面，创建方法，让不同方法代表不同通知类型
    (3)进行通知的配置
        [1]在spring配置文件中，开启注解扫描
        [2]使用注解创建User和UserProxy对象
        [3]在增强类上面添加注解@Aspect
        [4]在spring配置文件中开启生成代理对象
    (4)配置不同类型的通知
        [1]在增强类的里面，在作为通知方法上面添加通知类型注解，使用切入点表达式配置
    (5)相同的切入点抽取
    (6)如果一个类有多个增强类，对同一个方法进行增强，可以设置增强类的优先级
        [1]在增强类上面添加注解@Order（数字类型值），数字类型值越小优先级越高，before会更靠前，after会更靠后
    (7)完全使用注解开发
        [1]创建配置类，不需要创建xml配置文件

AOP操作（AspectJ配置文件）
    (1)创建两个类，增强类和被增强类，创建方法
    (2)在spring配置文件中创建两个类对象
    (3)在spring配置文件中配置切入点